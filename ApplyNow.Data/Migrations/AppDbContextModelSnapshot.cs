// <auto-generated />
using System;
using ApplyNow.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ApplyNow.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ApplyNow.Core.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ApplyId")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2020, 11, 5, 4, 8, 39, 185, DateTimeKind.Local).AddTicks(2660),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua",
                            EndDate = new DateTime(2020, 11, 17, 4, 8, 39, 185, DateTimeKind.Local).AddTicks(3010),
                            Location = "İstanbul"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            CreatedDate = new DateTime(2020, 11, 5, 4, 8, 39, 185, DateTimeKind.Local).AddTicks(3610),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua",
                            EndDate = new DateTime(2020, 11, 15, 4, 8, 39, 185, DateTimeKind.Local).AddTicks(3620),
                            Location = "İzmir"
                        });
                });

            modelBuilder.Entity("ApplyNow.Core.Models.Apply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ResumeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Applys");
                });

            modelBuilder.Entity("ApplyNow.Core.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Ankara/Türkiye",
                            Name = "Company X"
                        },
                        new
                        {
                            Id = 2,
                            Address = "İstanbul/Türkiye",
                            Name = "Company Y"
                        });
                });

            modelBuilder.Entity("ApplyNow.Core.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Department")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("EndDate")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ResumeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department = "Bilgisayar Mühendisliği",
                            EndDate = "2014",
                            Name = "İstanbul Teknik Ünversitesi",
                            ResumeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Department = "Bilgisayar Programcılığı",
                            EndDate = "2009",
                            Name = "İstanbul Lisesi",
                            ResumeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Department = "Hukuk Fakültesi",
                            EndDate = "2020",
                            Name = "Yıldız Teknik Üniversitesi",
                            ResumeId = 2
                        },
                        new
                        {
                            Id = 4,
                            Department = "Fen Bilimleri",
                            EndDate = "2014",
                            Name = "Ankara Lisesi",
                            ResumeId = 2
                        });
                });

            modelBuilder.Entity("ApplyNow.Core.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("EndDate")
                        .HasColumnType("text");

                    b.Property<int>("ResumeId")
                        .HasColumnType("integer");

                    b.Property<string>("StartDate")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "X Firma",
                            EndDate = "2015",
                            ResumeId = 1,
                            StartDate = "2012",
                            Title = "Yazılım Mühendisliği"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Y Firma",
                            EndDate = "2017",
                            ResumeId = 2,
                            StartDate = "2009",
                            Title = "Avukat"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "Z Firma",
                            EndDate = "2009",
                            ResumeId = 2,
                            StartDate = "2002",
                            Title = "Danışman"
                        });
                });

            modelBuilder.Entity("ApplyNow.Core.Models.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ApplyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Resumes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 11, 15, 4, 8, 39, 180, DateTimeKind.Local).AddTicks(7740),
                            IsActive = false,
                            Title = "Yazılım Uzmanı",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 11, 15, 4, 8, 39, 184, DateTimeKind.Local).AddTicks(5850),
                            IsActive = false,
                            Title = "Avukat",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ApplyNow.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user1@xyz.com",
                            Password = "123",
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user2@xyz.com",
                            Password = "123",
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("ApplyNow.Core.Models.Announcement", b =>
                {
                    b.HasOne("ApplyNow.Core.Models.Apply", null)
                        .WithMany("Announcements")
                        .HasForeignKey("ApplyId");

                    b.HasOne("ApplyNow.Core.Models.Company", null)
                        .WithMany("Announcements")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplyNow.Core.Models.Education", b =>
                {
                    b.HasOne("ApplyNow.Core.Models.Resume", null)
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplyNow.Core.Models.Experience", b =>
                {
                    b.HasOne("ApplyNow.Core.Models.Resume", null)
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplyNow.Core.Models.Resume", b =>
                {
                    b.HasOne("ApplyNow.Core.Models.Apply", null)
                        .WithMany("Resumes")
                        .HasForeignKey("ApplyId");

                    b.HasOne("ApplyNow.Core.Models.User", null)
                        .WithOne("Resume")
                        .HasForeignKey("ApplyNow.Core.Models.Resume", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
